#include "mcp_can.h"

long unsigned int rxId;
unsigned char len = 0;
unsigned char rxBuf[8];

MCP_CAN CAN0(10);                               // Set CS to pin 10

int RPM = 0;
int MAP = 0;
int TPS = 0;
int ECT = 0;
int IAT = 0;
int LAMBDA = 0;
int IN_CAM = 0;
int EX_CAM = 0;

int a,b,c,d;


void setup()
{
  Serial.begin(115200);
  // Initialize MCP2515 running at 8MHz with a baudrate of 1000kb/s and the masks and filters disabled.
  if(CAN0.begin(MCP_ANY, CAN_1000KBPS, MCP_8MHZ) == CAN_OK)   Serial.println("CAN OK");
  else   Serial.println("CAN NOT OK");
  CAN0.setMode(MCP_NORMAL);                     // Set operation mode to normal so the MCP2515 sends acks to received data.
 
  pinMode(2, INPUT);                            // Setting pin 2 for /INT input

}

void loop()
{

    if(!digitalRead(2))                         // If pin 2 is low, read receive buffer
    {
        CAN0.readMsgBuf(&rxId, &len, rxBuf);              // Read data: len = data length, buf = data byte(s)

        a = (rxBuf[0]*256 + rxBuf[1]);  //write the data from Byte 0 & 1 to variable "a"
        b = (rxBuf[2]*256 + rxBuf[3]);  //write the data from Byte 2 & 3 to variable "b"
        c = (rxBuf[4]*256 + rxBuf[5]);  //write the data from Byte 4 & 5 to variable "c"
        d = (rxBuf[6]*256 + rxBuf[7]);  //write the data from Byte 6 & 7 to variable "d"

        switch(rxId) {
      
          case 0x4B0:    // for this CAN ID, write the data from variables a,b,c&d into the following variables
          RPM = a;   
          TPS = b;
          MAP = c;
          LAMBDA = d;

          break;
       
          case 0x514:  // for this CAN ID, write the data from variables a,b,c&d into the following variables    
          ECT = a - 50;
          IAT = b - 50;
          IN_CAM = c;
          EX_CAM = d;
        }
        
     //now we send this out over serial in one line with a space between each variable and a caridge return at the end of each set.
     Serial.print("RPM");
     Serial.print(RPM);
     Serial.print(" ");
     Serial.print("TPS");
     Serial.print(TPS);
     Serial.print(" ");
     Serial.print("MAP");
     Serial.print(MAP);
     Serial.print(" ");
     Serial.print("LAMBDA");
     Serial.print(LAMBDA);
     Serial.print(" ");
     Serial.print("ECT");
     Serial.print(ECT);
     Serial.print(" ");
     Serial.print("IAT");
     Serial.print(IAT);
     Serial.print(" ");
     Serial.print("INCAM");
     Serial.print(IN_CAM);
     Serial.print(" ");
     Serial.print("EXCAM");
     Serial.print(EX_CAM);
     Serial.println();     
       
     }    }